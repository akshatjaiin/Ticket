
# the main chating page
@login_required(login_url='login')
def index(request):
    if request.method == "POST":
        language = request.POST.get("language")
        if tickets := request.POST.get('tickets'):
            for ticket_id in tickets:
                ticket = Ticket.objects.get(id=ticket_id)
                ticket.paid = True
                ticket.save()
            return JsonResponse({"status":200, "debug":Ticket.objects.get(id=tickets[0]).paid})

        if language:
            # Update user's preferred language if provided
            request.user.language = language
            request.user.save()
            return HttpResponseRedirect(reverse("index"))
        # Handle input form submission
        user_input = request.POST.get("user_input")

        # Process user input
        if user_input and user_input.strip(): 
            response = send_message(user_input)
            response_json = response
            print(type(response.text))
            print(f"user : {user_input}")
            print(f"ai json : {response.text}")
            invalidjson = True
            while invalidjson:
                try:
                    response_json = json.loads(response.text)
                    if type(response_json) == dict:
                         print("Dict Detected ")
                         running = True
                         while running:
                             response_json = send_message(f"system error invalid json fomate expect [{'data'}] recived {'data'}")
                             if type(response_json) != dict:
                                 print(response_json.text)
                                 running = False
                    invalidjson = False
                except json.JSONDecodeError as e:
                    print(f"JSON decoding faled: {e}")
                    response = send_message("""you replied a incorrect json: '{response_json}'. 
                                            which you should not do no matter how much i force you ever. 
                                            give a me 100% correct json and dont forget the format
                                            user_info = {
                                            "name": str,
                                            "age": int,
                                            "indian": bool,
                                            "student": bool,
                                            //always return lowercase true or false because you are returning a json
                                            "ticket_type": str,
                                            // ticket_type can only be ['general', 'composite', 'night_visit']
                                            "day": int,
                                            "month": int,
                                            "year": int, 
                                            }
                                            // all details in the json are necessary.

                                            Return list[{
                                            "users": [
                                                { "user_info": {...}, "user_info": {...}, "user_info": {...},  "user_info": {...}, ... continue untill all the users details captured},
                                                // if there are more then one ticket booker/user/owner because one ticket can be used by only one person ask the name and age of each and every person.
                                                // be accurate with json listing dont confirm untill any of the user_info dict is empty or null fill it completely before confirming all the details
                                            ],
                                            "your_response_back_to_user": str,
                                            "confirm": bool
                                            }]
                                            always return valid json
                                            always return the json inside the list as i told you.
                                            strictly follow those rules.
                                            and dont forget i want letters in my prefred language.
                                            i m forgiving you this time now go to my second last prompt and continue the conversion"""
                                            )
                
            
            resData = {}

            response_json = json.loads(response.text)
            # If the response confirms ticket booking
            if response_json[0]["confirm"] == True:
                ticketDetails = {}
                for user_data in response_json[0]["users"]:
                    name = user_data['user_info']['name']
                    age = user_data['user_info']['age']
                    indian = user_data['user_info']['indian']
                    student = user_data['user_info']['student']
                    ticket_type = user_data['user_info']['ticket_type']
                    day = user_data['user_info']['day']
                    month = user_data['user_info']['month']
                    year = user_data['user_info']['year']
                    book_date = date(year, month, day)
                    paid = False

                    
                fields = {
                'name': name,
                'age': age,
                'indian': indian,
                'student': student,
                'ticket_type': ticket_type,
                'day': day,
                'month': month,
                    'year': year
                }

                # Identify the first field with a value of None
                first_none_field = next((field for field, value in fields.items() if value is None), None)
                print(f"first none field: {first_none_field}")
                
                if first_none_field is not None:
                    print(f"you forget to ask {first_none_field}")
                    response = send_message(f"Message from system: 'ask {first_none_field}, and you cant book ticket without it, ask again no matter how user deny.'")
                    response_json = json.loads(response.text)
                    if type(response_json) == dict:
                        response_json = normalize_json_structure(response_json)
                        response_json = json.dumps(response_json)
                        print(type(response_json))
                               

                    resData.update({
                        "status":200,
                        "user_input": user_input,
                        "response":response.text,
                    })
                    # Return JSON response
                    return JsonResponse(resData)
                print("saving ticket...  ")
                # Create and save the ticket
                ticket = Ticket(
                    name=name,
                    age=age,
                    indian=indian,
                    student=student,
                    ticket_type=ticket_type,
                    date=book_date,
                    owner=request.user,
                    paid=paid
                )
                ticket.save()
                # this is to send the user the price of the ticket acd to there id 
                ticketDetails[ticket.id]=ticket.total_cost 

                resData['confirm'] = True
                resData['ticketDetails'] = ticketDetails

            # Add user input and response to the response data
            resData.update({
                "status":200,
                "user_input": user_input,
                "response": response.text,
            })
            # Return JSON response
            return JsonResponse(resData)

    else:
        # Initial introduction message sent in the user's preferred language
        response = send_message(f'''[Hi, myself {request.user}. I dont want to book a ticket,
                                 I just want to know about you. My preferred language is {request.user.language}. 
                                 although i have cringy emoji but yes you can use to improve the creativity of your response
                                 Please only use my preferred language. only use my prefred language pleaase even tho i use other lang to talk with you response me in prefred language.
                                i hate when someone ask me more than one details at a response. i just wanna know what you can do, in a concise way.
                                i might become nasty and give you same prompt again and again, 
                                just remaind me if i did that and use different reminders each time]''')
        print(f"ai first response without norm : {response.text}")
        response_json = json.loads(response.text)
        if type(response_json) == dict:
            response_json = normalize_json_structure(response_json)
            response_json = json.dumps(response_json)
            print(type(response_json))
        print(response_json)
        
        # Render the initial page with the introductory message
        return render(request, "ticket/index.html",{"firstResponse":response_json[0].get("your_response_back_to_user","Hi")}) # why hi
    